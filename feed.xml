<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.1">Jekyll</generator><link href="http://gregorygundersen.com/feed.xml" rel="self" type="application/atom+xml" /><link href="http://gregorygundersen.com/" rel="alternate" type="text/html" /><updated>2020-09-23T22:49:01-04:00</updated><id>http://gregorygundersen.com/feed.xml</id><entry><title type="html">Riddlers (09/18)</title><link href="http://gregorygundersen.com/blog/2020/09/23/riddler-centrifuge/" rel="alternate" type="text/html" title="Riddlers (09/18)" /><published>2020-09-23T00:00:00-04:00</published><updated>2020-09-23T00:00:00-04:00</updated><id>http://gregorygundersen.com/blog/2020/09/23/riddler-centrifuge</id><content type="html" xml:base="http://gregorygundersen.com/blog/2020/09/23/riddler-centrifuge/">&lt;p&gt;&lt;a href=&quot;https://href.li/?https://fivethirtyeight.com/features/can-you-break-a-very-expensive-centrifuge/&quot;&gt;This week’s Riddler puzzles&lt;/a&gt; could both be solved analytically! I was really excited that I didn’t have to rely on an absurd number of Python simulations to check the solutions. I also discovered a deeper connection to number theory in a general form for one of the problems that I’m pretty excited about.&lt;/p&gt;

&lt;h2 id=&quot;riddler-express-centrifuge-problem&quot;&gt;Riddler Express: Centrifuge Problem&lt;/h2&gt;

&lt;p&gt;You have to place 7 tubes in a 12-slot centrifuge such that the centrifuge is balanced (i.e., the center of mass is at its the center of the circle). You can assume the tubes all have the same dynamics.&lt;/p&gt;

&lt;p&gt;At first, this problem seems impossible. After all, there is some notion of symmetry here, and 7 just doesn’t feel like a number amenable to any kind of symmetry. However, the key is to recognize that the superposition of balanced sets is also a balanced set.&lt;/p&gt;

&lt;p&gt;In other words, if you need to place 4 tubes in the centrifuge, you can immediately see that placing them all 3 spots apart will result in a balanced configuration. But if you don’t see it immediately, you can also see that if you can place 2 tubes in a balanced configuration (by choosing diametrically opposing slots), then you can just repeat that process and you’ve put 4 tubes in a balanced configuration! The one caveat, of course, is that when you combine placements like this, you have to be sure that none of the slots are used twice (i.e., across two different placements).&lt;/p&gt;

&lt;p&gt;Now, we can decompose 7 tubes like this and solve the problem! If we use 7 = 3 + 2 + 2, it’s pretty easy to see how we can superimpose these 3 balanced configurations to create one balanced configuration over the 12 slots.&lt;/p&gt;

&lt;h3 id=&quot;extra-credit&quot;&gt;Extra Credit&lt;/h3&gt;

&lt;p&gt;OK, of course I did the extra credit (nerd alert!). If we want to see how many configurations there are to put these 7 tubes in, we can just look at it as a combinatorial problem. We first assume some rotational symmetry (i.e., putting two tubes in slots 12 and 6 is the same as putting them in 1 and 7 and so on) so that we’re actually looking at the unique number of configurations.&lt;/p&gt;

&lt;p&gt;Now, let’s place the 3 tubes (spaced 4 slots apart) however we want. There’s really only 1 choice to place the 3 tubes in a balanced configuration (can’t be decomposed into 2 + 1, since we can’t place 1 in a balanced configuration). So, all we’re choosing is where to put the two 2-tube arrangements.&lt;/p&gt;

&lt;p&gt;Remember the one constraint we have in this decomposition view is that we can’t have two decomposed configurations using the same slot. The 3 tube configuration actually rules out 6 slots for us to put tubes in, since the 2-tube requires the tubes to be diametrically opposed. So there’s 6 remaining slots.&lt;/p&gt;

&lt;p&gt;Choosing where to put 1 of the 2 tubes automatically determines where the other one will go (there is only one balanced configuration for 2 tubes). So, we have $\binom 32$ choices for how to arrange the 7 tubes.&lt;/p&gt;

&lt;h3 id=&quot;extra-extra-credit&quot;&gt;Extra Extra Credit&lt;/h3&gt;

&lt;p&gt;The more interesting question is: for what values of $n$ and $k$ can we actually place $k$ balanced tubes in an $n$-slot centrifuge? We had this natural instinct about $k=7$ and $n=12$ that ended up being wrong. It turns out that you can think about this problem in the complex plane. Any time I see evenly spaced points around a circle, my instinct is to think about the roots of unity on the unit circle. These form evenly spaced points along the circumference, each of which maps to a slot on the centrifuge.&lt;/p&gt;

&lt;p&gt;It turns out there’s a conjecture in number theory as follows: If $n\geq 2$ and $k\in [1,n]$, then you can find $k$ distinct $n$th roots of unity that sum to 0 if and only if $k$ and $n-k$ are nonnegative linear combinations (i.e., all coefficients are nonnegative) of prime factors of $n$.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;distinct&lt;/strong&gt; caveat is important here. Basically, we need to make sure we don’t try to put more than one test tube into a slot. It turns out this conjectore was &lt;a href=&quot;http://www.kurims.kyoto-u.ac.jp/EMIS/journals/INTEGERS/papers/k31/k31.pdf&quot;&gt;proved&lt;/a&gt;. Oddly enough, it was proved in the setting of this centrifuge problem!&lt;/p&gt;

&lt;p&gt;If you don’t want to think of the roots of unity, then you can also equivalently express this condition as $k$ and $n-k$ must be expressed as a sum of prime divisors of $n$.&lt;/p&gt;

&lt;h2 id=&quot;riddler-classic-word-games&quot;&gt;Riddler Classic: Word Games&lt;/h2&gt;

&lt;p&gt;So this problem actually took less time than the express did (probably because of my own tortuous extension of that problem). We have some $n$ words in a vocabulary, and we’re playing a game where try to guess what word was used this round. Every time we guess, the person tells us if the true word is alphabetically before or after our guess (or, if our guess is right).&lt;/p&gt;

&lt;p&gt;If you’ve studied computer science algorithms, this is a very familiar form. We’re traversing a binary tree with $n$ nodes, and each time we get feedback on our guess, we choose which child of the current node to explore. If you’re familiar with this structure, then you’re probably inclined to shout out $\log n$ search time, just like I did! But this is actually wrong.&lt;/p&gt;

&lt;p&gt;It takes $\log n$ time to traverse a binary search tree when you &lt;strong&gt;don’t know if your query is in the tree&lt;/strong&gt;. In this problem, we actually know that the word the game gave us is in the tree. Conditioning on this success can give us a slightly better answer. It’s better when you look at it asymptotically, but I guess for the $n$ given in the problem, it’s a pretty incremental improvement.&lt;/p&gt;

&lt;p&gt;Given that we know a path exists from the root to the node containing the correct word, we actually only care about what the path length is (i.e., how many queries we need to make). We can compute the expectation of the path length. The main assumption made here is that the game has a uniform distribution over all possible words in the vocabulary.&lt;/p&gt;

&lt;p&gt;There is only one path from the root to any single node in the tree, a property of the construction of a binary search tree. Let $T(n)$ be the expected number of queries needed to find the correct word. Then,&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;katex-display&quot;&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mtable rowspacing=&quot;0.24999999999999992em&quot; columnalign=&quot;right left&quot; columnspacing=&quot;0em&quot;&gt;&lt;mtr&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&quot;0&quot; displaystyle=&quot;true&quot;&gt;&lt;mrow&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot;&gt;(&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&quot;0&quot; displaystyle=&quot;true&quot;&gt;&lt;mrow&gt;&lt;mrow&gt;&lt;/mrow&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mfrac&gt;&lt;mrow&gt;&lt;munderover&gt;&lt;mo&gt;∑&lt;/mo&gt;&lt;mrow&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/munderover&gt;&lt;mrow&gt;&lt;mo fence=&quot;true&quot;&gt;⌊&lt;/mo&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mo&gt;&lt;mi&gt;log&lt;/mi&gt;&lt;mo&gt;⁡&lt;/mo&gt;&lt;/mo&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;/mrow&gt;&lt;mo fence=&quot;true&quot;&gt;⌋&lt;/mo&gt;&lt;/mrow&gt;&lt;/mrow&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/mfrac&gt;&lt;/mrow&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;/mtr&gt;&lt;/mtable&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\begin{aligned} T(n) &amp;amp;= 1 + \dfrac{\sum_{k=1}^n \left \lfloor{\log_2 k}\right \rfloor}{n} \end{aligned}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:2.4800020000000003em;vertical-align:-0.990001em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mtable&quot;&gt;&lt;span class=&quot;col-align-r&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:1.4900010000000004em;&quot;&gt;&lt;span style=&quot;top:-3.4900010000000004em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:3.494002em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot; style=&quot;margin-right:0.13889em;&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;mopen&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;mclose&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.990001em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;col-align-l&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:1.4900010000000004em;&quot;&gt;&lt;span style=&quot;top:-3.4900010000000004em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:3.494002em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mopen nulldelimiter&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mfrac&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:1.494002em;&quot;&gt;&lt;span style=&quot;top:-2.314em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;top:-3.23em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;frac-line&quot; style=&quot;border-bottom-width:0.04em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;top:-3.6897100000000003em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mop&quot;&gt;&lt;span class=&quot;mop op-symbol small-op&quot; style=&quot;position:relative;top:-0.0000050000000000050004em;&quot;&gt;∑&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.804292em;&quot;&gt;&lt;span style=&quot;top:-2.40029em;margin-left:0em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;&lt;span class=&quot;mord mathdefault mtight&quot; style=&quot;margin-right:0.03148em;&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;mrel mtight&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mord mtight&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;top:-3.2029em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mathdefault mtight&quot;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.29971000000000003em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.16666666666666666em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;minner&quot;&gt;&lt;span class=&quot;mopen delimcenter&quot; style=&quot;top:0em;&quot;&gt;⌊&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mop&quot;&gt;&lt;span class=&quot;mop&quot;&gt;lo&lt;span style=&quot;margin-right:0.01389em;&quot;&gt;g&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.20696799999999996em;&quot;&gt;&lt;span style=&quot;top:-2.4558600000000004em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.24414em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.16666666666666666em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot; style=&quot;margin-right:0.03148em;&quot;&gt;k&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mclose delimcenter&quot; style=&quot;top:0em;&quot;&gt;⌋&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.686em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mclose nulldelimiter&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.990001em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;The 1 here accounts for the initial iteration. I’m not going to compute this out for a general $n$, since it’s not necessary for the problem. But you can do it if you split the cases into whether or not the correct node is in the middle of the tree or is a leaf node.&lt;/p&gt;</content><author><name></name></author><summary type="html">This week’s Riddler puzzles could both be solved analytically! I was really excited that I didn’t have to rely on an absurd number of Python simulations to check the solutions. I also discovered a deeper connection to number theory in a general form for one of the problems that I’m pretty excited about.</summary></entry></feed>